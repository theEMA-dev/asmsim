name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  tests:
    permissions:
      contents: write
      discussions: write
      issues: write
      pages: write
      id-token: write
      security-events: write
      packages: write
    uses: ./.github/workflows/test-suite.yml
    
  build:
    runs-on: ${{ matrix.os }}
    needs: tests
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.11']

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Windows SDK
      if: runner.os == 'Windows'
      run: |
        Invoke-WebRequest -Uri "https://go.microsoft.com/fwlink/p/?linkid=2173743" -OutFile "winsdksetup.exe"
        Start-Process -FilePath "winsdksetup.exe" -ArgumentList "/features + /q" -Wait

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-dev libxkbcommon-x11-0 libdbus-1-3

    - name: Install macOS dependencies
      if: runner.os == 'macOS'
      run: |
        brew install create-dmg
    
    - name: Install Windows dependencies
      if: runner.os == 'Windows'
      run: |
        # Add error checking
        curl -L https://aka.ms/vs/16/release/vc_redist.x64.exe -o vc_redist.x64.exe
        if (-not $?) { exit 1 }
        .\vc_redist.x64.exe /install /quiet /norestart
        if (-not $?) { exit 1 }

    - name: Build with PyInstaller
      run: |
        python -m PyInstaller --clean asmsim.spec

    - name: Sign Windows Binary
      if: runner.os == 'Windows'
      env:
        CERTIFICATE_BASE64: ${{ secrets.WINDOWS_CERTIFICATE_BASE64 }}
        CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
      shell: pwsh
      run: |
        $certBytes = [Convert]::FromBase64String($env:CERTIFICATE_BASE64)
        [IO.File]::WriteAllBytes("certificate.pfx", $certBytes)
        $signtools = Get-ChildItem -Path "${env:ProgramFiles(x86)}\Windows Kits\10\bin\*\x64\signtool.exe" -ErrorAction SilentlyContinue
        if ($signtools.Count -eq 0) {
          throw "signtool.exe not found. Please ensure Windows SDK is installed."
        }
        $signtool = $signtools | Sort-Object -Property VersionInfo.FileVersion -Descending | Select-Object -First 1
        & $signtool sign /f certificate.pfx /p $env:CERTIFICATE_PASSWORD /tr http://timestamp.digicert.com /td sha256 /fd sha256 dist/asmsim.exe
        Remove-Item certificate.pfx -Force

    - name: Package Windows
      if: runner.os == 'Windows'
      run: |
        cd dist
        7z a asmsim-windows.zip asmsim.exe

    - name: Package macOS
      if: runner.os == 'macOS'
      run: |
        cd dist
        create-dmg --volname "ASMSIM" --window-pos 200 120 --window-size 800 400 --icon-size 100 --app-drop-link 600 185 asmsim.dmg asmsim.app

    - name: Package Linux
      if: runner.os == 'Linux'
      run: |
        cd dist
        tar -czf asmsim-linux.tar.gz asmsim

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: asmsim-${{ runner.os }}
        path: dist/*

  documentation:
    needs: build
    permissions: write-all
    secrets: inherit
    uses: ./.github/workflows/generate-docs.yml

  release:
    needs: documentation
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main
        uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: dist

      - name: Create Release
        uses: softprops/action-gh-release@v2.2.0
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            *
          draft: true
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}