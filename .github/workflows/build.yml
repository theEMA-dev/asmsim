name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  tests:
    permissions:
      actions: read
      security-events: write
      contents: read
      packages: read
    uses: ./.github/workflows/test-suite.yml
    
  build:
    runs-on: ${{ matrix.os }}
    needs: tests
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.11']

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-dev libxkbcommon-x11-0 libdbus-1-3

    - name: Install macOS dependencies
      if: runner.os == 'macOS'
      run: |
        brew install create-dmg
    
    - name: Install Windows dependencies
      if: runner.os == 'Windows'
      run: |
        # Add error checking
        curl -L https://aka.ms/vs/16/release/vc_redist.x64.exe -o vc_redist.x64.exe
        if (-not $?) { exit 1 }
        .\vc_redist.x64.exe /install /quiet /norestart
        if (-not $?) { exit 1 }

    - name: Build with PyInstaller
      run: |
        python -m PyInstaller --clean asmsim.spec

    - name: Sign Windows Binary
      if: runner.os == 'Windows'
      env:
        CERTIFICATE_BASE64: ${{ secrets.WINDOWS_CERTIFICATE_BASE64 }}
        CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
      run: |
        echo "$CERTIFICATE_BASE64" | base64 --decode > certificate.pfx
        signtool sign /f certificate.pfx /p "$CERTIFICATE_PASSWORD" /tr http://timestamp.digicert.com /td sha256 /fd sha256 dist/asmsim.exe
        del certificate.pfx

    - name: Package Windows
      if: runner.os == 'Windows'
      run: |
        cd dist
        7z a asmsim-windows.zip asmsim.exe

    - name: Package macOS
      if: runner.os == 'macOS'
      run: |
        cd dist
        create-dmg --volname "ASMSIM" --window-pos 200 120 --window-size 800 400 --icon-size 100 --app-drop-link 600 185 asmsim.dmg asmsim.app

    - name: Package Linux
      if: runner.os == 'Linux'
      run: |
        cd dist
        tar -czf asmsim-linux.tar.gz asmsim

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: asmsim-${{ runner.os }}
        path: dist/*

    - name: Create Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: dist/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}